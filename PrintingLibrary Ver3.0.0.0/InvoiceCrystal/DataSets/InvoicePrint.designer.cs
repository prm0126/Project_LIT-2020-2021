//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BillPrint.DataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InvoicePrint")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InvoicePrint : global::System.Data.DataSet {
        
        private BILL_DETAILSDataTable tableBILL_DETAILS;
        
        private BILL_MASTERDataTable tableBILL_MASTER;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoicePrint() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InvoicePrint(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BILL_DETAILS"] != null)) {
                    base.Tables.Add(new BILL_DETAILSDataTable(ds.Tables["BILL_DETAILS"]));
                }
                if ((ds.Tables["BILL_MASTER"] != null)) {
                    base.Tables.Add(new BILL_MASTERDataTable(ds.Tables["BILL_MASTER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BILL_DETAILSDataTable BILL_DETAILS {
            get {
                return this.tableBILL_DETAILS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BILL_MASTERDataTable BILL_MASTER {
            get {
                return this.tableBILL_MASTER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InvoicePrint cln = ((InvoicePrint)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BILL_DETAILS"] != null)) {
                    base.Tables.Add(new BILL_DETAILSDataTable(ds.Tables["BILL_DETAILS"]));
                }
                if ((ds.Tables["BILL_MASTER"] != null)) {
                    base.Tables.Add(new BILL_MASTERDataTable(ds.Tables["BILL_MASTER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBILL_DETAILS = ((BILL_DETAILSDataTable)(base.Tables["BILL_DETAILS"]));
            if ((initTable == true)) {
                if ((this.tableBILL_DETAILS != null)) {
                    this.tableBILL_DETAILS.InitVars();
                }
            }
            this.tableBILL_MASTER = ((BILL_MASTERDataTable)(base.Tables["BILL_MASTER"]));
            if ((initTable == true)) {
                if ((this.tableBILL_MASTER != null)) {
                    this.tableBILL_MASTER.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InvoicePrint";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InvoicePrint.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBILL_DETAILS = new BILL_DETAILSDataTable();
            base.Tables.Add(this.tableBILL_DETAILS);
            this.tableBILL_MASTER = new BILL_MASTERDataTable();
            base.Tables.Add(this.tableBILL_MASTER);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBILL_DETAILS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBILL_MASTER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InvoicePrint ds = new InvoicePrint();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BILL_DETAILSRowChangeEventHandler(object sender, BILL_DETAILSRowChangeEvent e);
        
        public delegate void BILL_MASTERRowChangeEventHandler(object sender, BILL_MASTERRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BILL_DETAILSDataTable : global::System.Data.TypedTableBase<BILL_DETAILSRow> {
            
            private global::System.Data.DataColumn columnSI_NO;
            
            private global::System.Data.DataColumn columnSERVICE_NAME;
            
            private global::System.Data.DataColumn columnSERVICE_SUB_CATEGORY_NAME;
            
            private global::System.Data.DataColumn columnNET_TOTAL;
            
            private global::System.Data.DataColumn columnADJUSTMENTS;
            
            private global::System.Data.DataColumn columnQTY;
            
            private global::System.Data.DataColumn columnGRAND_TOTAL;
            
            private global::System.Data.DataColumn columnBILL_NO;
            
            private global::System.Data.DataColumn columnTOKEN_NO;
            
            private global::System.Data.DataColumn columnBATCH_NO;
            
            private global::System.Data.DataColumn columnUNIT_PRICE;
            
            private global::System.Data.DataColumn columnMEDICINE_NAME;
            
            private global::System.Data.DataColumn columnIS_RETURN;
            
            private global::System.Data.DataColumn columnRETURN_DATE;
            
            private global::System.Data.DataColumn columnCOPAY;
            
            private global::System.Data.DataColumn columnCPTCODE;
            
            private global::System.Data.DataColumn columnEXPIRY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_DETAILSDataTable() {
                this.TableName = "BILL_DETAILS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_DETAILSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BILL_DETAILSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SI_NOColumn {
                get {
                    return this.columnSI_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICE_NAMEColumn {
                get {
                    return this.columnSERVICE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICE_SUB_CATEGORY_NAMEColumn {
                get {
                    return this.columnSERVICE_SUB_CATEGORY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NET_TOTALColumn {
                get {
                    return this.columnNET_TOTAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADJUSTMENTSColumn {
                get {
                    return this.columnADJUSTMENTS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QTYColumn {
                get {
                    return this.columnQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRAND_TOTALColumn {
                get {
                    return this.columnGRAND_TOTAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_NOColumn {
                get {
                    return this.columnBILL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOKEN_NOColumn {
                get {
                    return this.columnTOKEN_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BATCH_NOColumn {
                get {
                    return this.columnBATCH_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIT_PRICEColumn {
                get {
                    return this.columnUNIT_PRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEDICINE_NAMEColumn {
                get {
                    return this.columnMEDICINE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IS_RETURNColumn {
                get {
                    return this.columnIS_RETURN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RETURN_DATEColumn {
                get {
                    return this.columnRETURN_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COPAYColumn {
                get {
                    return this.columnCOPAY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CPTCODEColumn {
                get {
                    return this.columnCPTCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXPIRYColumn {
                get {
                    return this.columnEXPIRY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_DETAILSRow this[int index] {
                get {
                    return ((BILL_DETAILSRow)(this.Rows[index]));
                }
            }
            
            public event BILL_DETAILSRowChangeEventHandler BILL_DETAILSRowChanging;
            
            public event BILL_DETAILSRowChangeEventHandler BILL_DETAILSRowChanged;
            
            public event BILL_DETAILSRowChangeEventHandler BILL_DETAILSRowDeleting;
            
            public event BILL_DETAILSRowChangeEventHandler BILL_DETAILSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBILL_DETAILSRow(BILL_DETAILSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_DETAILSRow AddBILL_DETAILSRow(
                        int SI_NO, 
                        string SERVICE_NAME, 
                        string SERVICE_SUB_CATEGORY_NAME, 
                        decimal NET_TOTAL, 
                        int ADJUSTMENTS, 
                        int QTY, 
                        decimal GRAND_TOTAL, 
                        string BILL_NO, 
                        int TOKEN_NO, 
                        string BATCH_NO, 
                        decimal UNIT_PRICE, 
                        string MEDICINE_NAME, 
                        int IS_RETURN, 
                        System.DateTime RETURN_DATE, 
                        decimal COPAY, 
                        string CPTCODE, 
                        System.DateTime EXPIRY) {
                BILL_DETAILSRow rowBILL_DETAILSRow = ((BILL_DETAILSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SI_NO,
                        SERVICE_NAME,
                        SERVICE_SUB_CATEGORY_NAME,
                        NET_TOTAL,
                        ADJUSTMENTS,
                        QTY,
                        GRAND_TOTAL,
                        BILL_NO,
                        TOKEN_NO,
                        BATCH_NO,
                        UNIT_PRICE,
                        MEDICINE_NAME,
                        IS_RETURN,
                        RETURN_DATE,
                        COPAY,
                        CPTCODE,
                        EXPIRY};
                rowBILL_DETAILSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBILL_DETAILSRow);
                return rowBILL_DETAILSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BILL_DETAILSDataTable cln = ((BILL_DETAILSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BILL_DETAILSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSI_NO = base.Columns["SI_NO"];
                this.columnSERVICE_NAME = base.Columns["SERVICE_NAME"];
                this.columnSERVICE_SUB_CATEGORY_NAME = base.Columns["SERVICE_SUB_CATEGORY_NAME"];
                this.columnNET_TOTAL = base.Columns["NET_TOTAL"];
                this.columnADJUSTMENTS = base.Columns["ADJUSTMENTS"];
                this.columnQTY = base.Columns["QTY"];
                this.columnGRAND_TOTAL = base.Columns["GRAND_TOTAL"];
                this.columnBILL_NO = base.Columns["BILL_NO"];
                this.columnTOKEN_NO = base.Columns["TOKEN_NO"];
                this.columnBATCH_NO = base.Columns["BATCH_NO"];
                this.columnUNIT_PRICE = base.Columns["UNIT_PRICE"];
                this.columnMEDICINE_NAME = base.Columns["MEDICINE_NAME"];
                this.columnIS_RETURN = base.Columns["IS_RETURN"];
                this.columnRETURN_DATE = base.Columns["RETURN_DATE"];
                this.columnCOPAY = base.Columns["COPAY"];
                this.columnCPTCODE = base.Columns["CPTCODE"];
                this.columnEXPIRY = base.Columns["EXPIRY"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSI_NO = new global::System.Data.DataColumn("SI_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSI_NO);
                this.columnSERVICE_NAME = new global::System.Data.DataColumn("SERVICE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICE_NAME);
                this.columnSERVICE_SUB_CATEGORY_NAME = new global::System.Data.DataColumn("SERVICE_SUB_CATEGORY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICE_SUB_CATEGORY_NAME);
                this.columnNET_TOTAL = new global::System.Data.DataColumn("NET_TOTAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNET_TOTAL);
                this.columnADJUSTMENTS = new global::System.Data.DataColumn("ADJUSTMENTS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADJUSTMENTS);
                this.columnQTY = new global::System.Data.DataColumn("QTY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTY);
                this.columnGRAND_TOTAL = new global::System.Data.DataColumn("GRAND_TOTAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRAND_TOTAL);
                this.columnBILL_NO = new global::System.Data.DataColumn("BILL_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_NO);
                this.columnTOKEN_NO = new global::System.Data.DataColumn("TOKEN_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOKEN_NO);
                this.columnBATCH_NO = new global::System.Data.DataColumn("BATCH_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBATCH_NO);
                this.columnUNIT_PRICE = new global::System.Data.DataColumn("UNIT_PRICE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT_PRICE);
                this.columnMEDICINE_NAME = new global::System.Data.DataColumn("MEDICINE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDICINE_NAME);
                this.columnIS_RETURN = new global::System.Data.DataColumn("IS_RETURN", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_RETURN);
                this.columnRETURN_DATE = new global::System.Data.DataColumn("RETURN_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRETURN_DATE);
                this.columnCOPAY = new global::System.Data.DataColumn("COPAY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOPAY);
                this.columnCPTCODE = new global::System.Data.DataColumn("CPTCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCPTCODE);
                this.columnEXPIRY = new global::System.Data.DataColumn("EXPIRY", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXPIRY);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_DETAILSRow NewBILL_DETAILSRow() {
                return ((BILL_DETAILSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BILL_DETAILSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BILL_DETAILSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BILL_DETAILSRowChanged != null)) {
                    this.BILL_DETAILSRowChanged(this, new BILL_DETAILSRowChangeEvent(((BILL_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BILL_DETAILSRowChanging != null)) {
                    this.BILL_DETAILSRowChanging(this, new BILL_DETAILSRowChangeEvent(((BILL_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BILL_DETAILSRowDeleted != null)) {
                    this.BILL_DETAILSRowDeleted(this, new BILL_DETAILSRowChangeEvent(((BILL_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BILL_DETAILSRowDeleting != null)) {
                    this.BILL_DETAILSRowDeleting(this, new BILL_DETAILSRowChangeEvent(((BILL_DETAILSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBILL_DETAILSRow(BILL_DETAILSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoicePrint ds = new InvoicePrint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BILL_DETAILSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BILL_MASTERDataTable : global::System.Data.TypedTableBase<BILL_MASTERRow> {
            
            private global::System.Data.DataColumn columnBILL_NO;
            
            private global::System.Data.DataColumn columnPAT_NAME;
            
            private global::System.Data.DataColumn columnMRNO;
            
            private global::System.Data.DataColumn columnBILL_DATE;
            
            private global::System.Data.DataColumn columnBILL_TYPE;
            
            private global::System.Data.DataColumn columnSERVICE_TYPE;
            
            private global::System.Data.DataColumn columnDOCTOR_NAME;
            
            private global::System.Data.DataColumn columnIS_DUPLICATE;
            
            private global::System.Data.DataColumn columnBILLED_BY;
            
            private global::System.Data.DataColumn columnDEPARTMENT;
            
            private global::System.Data.DataColumn columnCLINIC;
            
            private global::System.Data.DataColumn columnTOTAL_AMOUNT_IN_WORDS;
            
            private global::System.Data.DataColumn columnCONTRACT_NAME;
            
            private global::System.Data.DataColumn columnCOMPANY;
            
            private global::System.Data.DataColumn columnINSURANCE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MASTERDataTable() {
                this.TableName = "BILL_MASTER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_MASTERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BILL_MASTERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_NOColumn {
                get {
                    return this.columnBILL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAT_NAMEColumn {
                get {
                    return this.columnPAT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRNOColumn {
                get {
                    return this.columnMRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_DATEColumn {
                get {
                    return this.columnBILL_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_TYPEColumn {
                get {
                    return this.columnBILL_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICE_TYPEColumn {
                get {
                    return this.columnSERVICE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCTOR_NAMEColumn {
                get {
                    return this.columnDOCTOR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IS_DUPLICATEColumn {
                get {
                    return this.columnIS_DUPLICATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILLED_BYColumn {
                get {
                    return this.columnBILLED_BY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPARTMENTColumn {
                get {
                    return this.columnDEPARTMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLINICColumn {
                get {
                    return this.columnCLINIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_AMOUNT_IN_WORDSColumn {
                get {
                    return this.columnTOTAL_AMOUNT_IN_WORDS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTRACT_NAMEColumn {
                get {
                    return this.columnCONTRACT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANYColumn {
                get {
                    return this.columnCOMPANY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSURANCEColumn {
                get {
                    return this.columnINSURANCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MASTERRow this[int index] {
                get {
                    return ((BILL_MASTERRow)(this.Rows[index]));
                }
            }
            
            public event BILL_MASTERRowChangeEventHandler BILL_MASTERRowChanging;
            
            public event BILL_MASTERRowChangeEventHandler BILL_MASTERRowChanged;
            
            public event BILL_MASTERRowChangeEventHandler BILL_MASTERRowDeleting;
            
            public event BILL_MASTERRowChangeEventHandler BILL_MASTERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBILL_MASTERRow(BILL_MASTERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MASTERRow AddBILL_MASTERRow(string BILL_NO, string PAT_NAME, string MRNO, System.DateTime BILL_DATE, string BILL_TYPE, string SERVICE_TYPE, string DOCTOR_NAME, int IS_DUPLICATE, string BILLED_BY, string DEPARTMENT, string CLINIC, string TOTAL_AMOUNT_IN_WORDS, string CONTRACT_NAME, string COMPANY, string INSURANCE) {
                BILL_MASTERRow rowBILL_MASTERRow = ((BILL_MASTERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BILL_NO,
                        PAT_NAME,
                        MRNO,
                        BILL_DATE,
                        BILL_TYPE,
                        SERVICE_TYPE,
                        DOCTOR_NAME,
                        IS_DUPLICATE,
                        BILLED_BY,
                        DEPARTMENT,
                        CLINIC,
                        TOTAL_AMOUNT_IN_WORDS,
                        CONTRACT_NAME,
                        COMPANY,
                        INSURANCE};
                rowBILL_MASTERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBILL_MASTERRow);
                return rowBILL_MASTERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BILL_MASTERDataTable cln = ((BILL_MASTERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BILL_MASTERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBILL_NO = base.Columns["BILL_NO"];
                this.columnPAT_NAME = base.Columns["PAT_NAME"];
                this.columnMRNO = base.Columns["MRNO"];
                this.columnBILL_DATE = base.Columns["BILL_DATE"];
                this.columnBILL_TYPE = base.Columns["BILL_TYPE"];
                this.columnSERVICE_TYPE = base.Columns["SERVICE_TYPE"];
                this.columnDOCTOR_NAME = base.Columns["DOCTOR_NAME"];
                this.columnIS_DUPLICATE = base.Columns["IS_DUPLICATE"];
                this.columnBILLED_BY = base.Columns["BILLED_BY"];
                this.columnDEPARTMENT = base.Columns["DEPARTMENT"];
                this.columnCLINIC = base.Columns["CLINIC"];
                this.columnTOTAL_AMOUNT_IN_WORDS = base.Columns["TOTAL_AMOUNT_IN_WORDS"];
                this.columnCONTRACT_NAME = base.Columns["CONTRACT_NAME"];
                this.columnCOMPANY = base.Columns["COMPANY"];
                this.columnINSURANCE = base.Columns["INSURANCE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBILL_NO = new global::System.Data.DataColumn("BILL_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_NO);
                this.columnPAT_NAME = new global::System.Data.DataColumn("PAT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAT_NAME);
                this.columnMRNO = new global::System.Data.DataColumn("MRNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRNO);
                this.columnBILL_DATE = new global::System.Data.DataColumn("BILL_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_DATE);
                this.columnBILL_TYPE = new global::System.Data.DataColumn("BILL_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_TYPE);
                this.columnSERVICE_TYPE = new global::System.Data.DataColumn("SERVICE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICE_TYPE);
                this.columnDOCTOR_NAME = new global::System.Data.DataColumn("DOCTOR_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCTOR_NAME);
                this.columnIS_DUPLICATE = new global::System.Data.DataColumn("IS_DUPLICATE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_DUPLICATE);
                this.columnBILLED_BY = new global::System.Data.DataColumn("BILLED_BY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILLED_BY);
                this.columnDEPARTMENT = new global::System.Data.DataColumn("DEPARTMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPARTMENT);
                this.columnCLINIC = new global::System.Data.DataColumn("CLINIC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLINIC);
                this.columnTOTAL_AMOUNT_IN_WORDS = new global::System.Data.DataColumn("TOTAL_AMOUNT_IN_WORDS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_AMOUNT_IN_WORDS);
                this.columnCONTRACT_NAME = new global::System.Data.DataColumn("CONTRACT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACT_NAME);
                this.columnCOMPANY = new global::System.Data.DataColumn("COMPANY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY);
                this.columnINSURANCE = new global::System.Data.DataColumn("INSURANCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSURANCE);
                this.columnPAT_NAME.Caption = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MASTERRow NewBILL_MASTERRow() {
                return ((BILL_MASTERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BILL_MASTERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BILL_MASTERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BILL_MASTERRowChanged != null)) {
                    this.BILL_MASTERRowChanged(this, new BILL_MASTERRowChangeEvent(((BILL_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BILL_MASTERRowChanging != null)) {
                    this.BILL_MASTERRowChanging(this, new BILL_MASTERRowChangeEvent(((BILL_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BILL_MASTERRowDeleted != null)) {
                    this.BILL_MASTERRowDeleted(this, new BILL_MASTERRowChangeEvent(((BILL_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BILL_MASTERRowDeleting != null)) {
                    this.BILL_MASTERRowDeleting(this, new BILL_MASTERRowChangeEvent(((BILL_MASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBILL_MASTERRow(BILL_MASTERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InvoicePrint ds = new InvoicePrint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BILL_MASTERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BILL_DETAILSRow : global::System.Data.DataRow {
            
            private BILL_DETAILSDataTable tableBILL_DETAILS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_DETAILSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBILL_DETAILS = ((BILL_DETAILSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SI_NO {
                get {
                    try {
                        return ((int)(this[this.tableBILL_DETAILS.SI_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SI_NO\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.SI_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERVICE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_DETAILS.SERVICE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERVICE_NAME\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.SERVICE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERVICE_SUB_CATEGORY_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_DETAILS.SERVICE_SUB_CATEGORY_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERVICE_SUB_CATEGORY_NAME\' in table \'BILL_DETAILS\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.SERVICE_SUB_CATEGORY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NET_TOTAL {
                get {
                    try {
                        return ((decimal)(this[this.tableBILL_DETAILS.NET_TOTALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NET_TOTAL\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.NET_TOTALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ADJUSTMENTS {
                get {
                    try {
                        return ((int)(this[this.tableBILL_DETAILS.ADJUSTMENTSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADJUSTMENTS\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.ADJUSTMENTSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QTY {
                get {
                    try {
                        return ((int)(this[this.tableBILL_DETAILS.QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QTY\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GRAND_TOTAL {
                get {
                    try {
                        return ((decimal)(this[this.tableBILL_DETAILS.GRAND_TOTALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRAND_TOTAL\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.GRAND_TOTALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_NO {
                get {
                    try {
                        return ((string)(this[this.tableBILL_DETAILS.BILL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_NO\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.BILL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TOKEN_NO {
                get {
                    try {
                        return ((int)(this[this.tableBILL_DETAILS.TOKEN_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOKEN_NO\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.TOKEN_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BATCH_NO {
                get {
                    try {
                        return ((string)(this[this.tableBILL_DETAILS.BATCH_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BATCH_NO\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.BATCH_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UNIT_PRICE {
                get {
                    try {
                        return ((decimal)(this[this.tableBILL_DETAILS.UNIT_PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT_PRICE\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.UNIT_PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEDICINE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_DETAILS.MEDICINE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEDICINE_NAME\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.MEDICINE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IS_RETURN {
                get {
                    try {
                        return ((int)(this[this.tableBILL_DETAILS.IS_RETURNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IS_RETURN\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.IS_RETURNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RETURN_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBILL_DETAILS.RETURN_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RETURN_DATE\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.RETURN_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal COPAY {
                get {
                    try {
                        return ((decimal)(this[this.tableBILL_DETAILS.COPAYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COPAY\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.COPAYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CPTCODE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_DETAILS.CPTCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CPTCODE\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.CPTCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EXPIRY {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBILL_DETAILS.EXPIRYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXPIRY\' in table \'BILL_DETAILS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_DETAILS.EXPIRYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSI_NONull() {
                return this.IsNull(this.tableBILL_DETAILS.SI_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSI_NONull() {
                this[this.tableBILL_DETAILS.SI_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICE_NAMENull() {
                return this.IsNull(this.tableBILL_DETAILS.SERVICE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICE_NAMENull() {
                this[this.tableBILL_DETAILS.SERVICE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICE_SUB_CATEGORY_NAMENull() {
                return this.IsNull(this.tableBILL_DETAILS.SERVICE_SUB_CATEGORY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICE_SUB_CATEGORY_NAMENull() {
                this[this.tableBILL_DETAILS.SERVICE_SUB_CATEGORY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNET_TOTALNull() {
                return this.IsNull(this.tableBILL_DETAILS.NET_TOTALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNET_TOTALNull() {
                this[this.tableBILL_DETAILS.NET_TOTALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADJUSTMENTSNull() {
                return this.IsNull(this.tableBILL_DETAILS.ADJUSTMENTSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADJUSTMENTSNull() {
                this[this.tableBILL_DETAILS.ADJUSTMENTSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTYNull() {
                return this.IsNull(this.tableBILL_DETAILS.QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTYNull() {
                this[this.tableBILL_DETAILS.QTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRAND_TOTALNull() {
                return this.IsNull(this.tableBILL_DETAILS.GRAND_TOTALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRAND_TOTALNull() {
                this[this.tableBILL_DETAILS.GRAND_TOTALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_NONull() {
                return this.IsNull(this.tableBILL_DETAILS.BILL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_NONull() {
                this[this.tableBILL_DETAILS.BILL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOKEN_NONull() {
                return this.IsNull(this.tableBILL_DETAILS.TOKEN_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOKEN_NONull() {
                this[this.tableBILL_DETAILS.TOKEN_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBATCH_NONull() {
                return this.IsNull(this.tableBILL_DETAILS.BATCH_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBATCH_NONull() {
                this[this.tableBILL_DETAILS.BATCH_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIT_PRICENull() {
                return this.IsNull(this.tableBILL_DETAILS.UNIT_PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIT_PRICENull() {
                this[this.tableBILL_DETAILS.UNIT_PRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEDICINE_NAMENull() {
                return this.IsNull(this.tableBILL_DETAILS.MEDICINE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEDICINE_NAMENull() {
                this[this.tableBILL_DETAILS.MEDICINE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIS_RETURNNull() {
                return this.IsNull(this.tableBILL_DETAILS.IS_RETURNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIS_RETURNNull() {
                this[this.tableBILL_DETAILS.IS_RETURNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRETURN_DATENull() {
                return this.IsNull(this.tableBILL_DETAILS.RETURN_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRETURN_DATENull() {
                this[this.tableBILL_DETAILS.RETURN_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOPAYNull() {
                return this.IsNull(this.tableBILL_DETAILS.COPAYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOPAYNull() {
                this[this.tableBILL_DETAILS.COPAYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCPTCODENull() {
                return this.IsNull(this.tableBILL_DETAILS.CPTCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCPTCODENull() {
                this[this.tableBILL_DETAILS.CPTCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXPIRYNull() {
                return this.IsNull(this.tableBILL_DETAILS.EXPIRYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXPIRYNull() {
                this[this.tableBILL_DETAILS.EXPIRYColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BILL_MASTERRow : global::System.Data.DataRow {
            
            private BILL_MASTERDataTable tableBILL_MASTER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_MASTERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBILL_MASTER = ((BILL_MASTERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_NO {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.BILL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_NO\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.BILL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.PAT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAT_NAME\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.PAT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MRNO {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.MRNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRNO\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.MRNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BILL_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBILL_MASTER.BILL_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_DATE\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.BILL_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.BILL_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_TYPE\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.BILL_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERVICE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.SERVICE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERVICE_TYPE\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.SERVICE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCTOR_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.DOCTOR_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCTOR_NAME\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.DOCTOR_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IS_DUPLICATE {
                get {
                    try {
                        return ((int)(this[this.tableBILL_MASTER.IS_DUPLICATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IS_DUPLICATE\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.IS_DUPLICATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILLED_BY {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.BILLED_BYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILLED_BY\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.BILLED_BYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPARTMENT {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.DEPARTMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEPARTMENT\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.DEPARTMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLINIC {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.CLINICColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLINIC\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.CLINICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_AMOUNT_IN_WORDS {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.TOTAL_AMOUNT_IN_WORDSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTAL_AMOUNT_IN_WORDS\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.TOTAL_AMOUNT_IN_WORDSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.CONTRACT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTRACT_NAME\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.CONTRACT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANY {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.COMPANYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.COMPANYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INSURANCE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MASTER.INSURANCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSURANCE\' in table \'BILL_MASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MASTER.INSURANCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_NONull() {
                return this.IsNull(this.tableBILL_MASTER.BILL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_NONull() {
                this[this.tableBILL_MASTER.BILL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAT_NAMENull() {
                return this.IsNull(this.tableBILL_MASTER.PAT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAT_NAMENull() {
                this[this.tableBILL_MASTER.PAT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMRNONull() {
                return this.IsNull(this.tableBILL_MASTER.MRNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMRNONull() {
                this[this.tableBILL_MASTER.MRNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_DATENull() {
                return this.IsNull(this.tableBILL_MASTER.BILL_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_DATENull() {
                this[this.tableBILL_MASTER.BILL_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_TYPENull() {
                return this.IsNull(this.tableBILL_MASTER.BILL_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_TYPENull() {
                this[this.tableBILL_MASTER.BILL_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICE_TYPENull() {
                return this.IsNull(this.tableBILL_MASTER.SERVICE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICE_TYPENull() {
                this[this.tableBILL_MASTER.SERVICE_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCTOR_NAMENull() {
                return this.IsNull(this.tableBILL_MASTER.DOCTOR_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCTOR_NAMENull() {
                this[this.tableBILL_MASTER.DOCTOR_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIS_DUPLICATENull() {
                return this.IsNull(this.tableBILL_MASTER.IS_DUPLICATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIS_DUPLICATENull() {
                this[this.tableBILL_MASTER.IS_DUPLICATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILLED_BYNull() {
                return this.IsNull(this.tableBILL_MASTER.BILLED_BYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILLED_BYNull() {
                this[this.tableBILL_MASTER.BILLED_BYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPARTMENTNull() {
                return this.IsNull(this.tableBILL_MASTER.DEPARTMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPARTMENTNull() {
                this[this.tableBILL_MASTER.DEPARTMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLINICNull() {
                return this.IsNull(this.tableBILL_MASTER.CLINICColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLINICNull() {
                this[this.tableBILL_MASTER.CLINICColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_AMOUNT_IN_WORDSNull() {
                return this.IsNull(this.tableBILL_MASTER.TOTAL_AMOUNT_IN_WORDSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_AMOUNT_IN_WORDSNull() {
                this[this.tableBILL_MASTER.TOTAL_AMOUNT_IN_WORDSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACT_NAMENull() {
                return this.IsNull(this.tableBILL_MASTER.CONTRACT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACT_NAMENull() {
                this[this.tableBILL_MASTER.CONTRACT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANYNull() {
                return this.IsNull(this.tableBILL_MASTER.COMPANYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANYNull() {
                this[this.tableBILL_MASTER.COMPANYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSURANCENull() {
                return this.IsNull(this.tableBILL_MASTER.INSURANCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSURANCENull() {
                this[this.tableBILL_MASTER.INSURANCEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BILL_DETAILSRowChangeEvent : global::System.EventArgs {
            
            private BILL_DETAILSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_DETAILSRowChangeEvent(BILL_DETAILSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_DETAILSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BILL_MASTERRowChangeEvent : global::System.EventArgs {
            
            private BILL_MASTERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MASTERRowChangeEvent(BILL_MASTERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MASTERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591